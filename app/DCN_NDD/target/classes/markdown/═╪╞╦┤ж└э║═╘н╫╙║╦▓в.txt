在nat的拓扑上，保证数据是经过nat之后肯定被转发的
对于leaf节点，保证了数据包之间的可达性，core只关注src的epg

原子数目太多的问题，是否涉及到了合并的问题，以及划分是否是合理的


//after vni identifier: 553 time: 376
after vni encap*: 630 620
after vni encap: 630 time: 621
after vxlan ip encap: 630 time: 621
start.size()48
endEndpoint.size()48
reachability:496
total_time:191387.2331
496，路径长度=20

仅有ip转发的时候搜索路径需要11跳
ip+vni的时候参数为18

# 原子数量是否合理的问题
归根结底还是得寻找划分原子的原因和为什么会产生这样的原子。原子数量的分配是否合理

如果原子数正确，那么没问题，就应该是这样的划分，那么就是跑不出来

如果原子数不正确，那么寻找哪里进行了额外划分。

保证了原子数最小


做出以下内容介绍。




7642
before:410
{leaf-0-0_vpn3=[vxlan], leaf-0-3_vpn4=[vxlan], leaf-0-0_vpn4=[vxlan], leaf-0-3_encapip=[855638017], leaf-0-2_encapip=[855638017], core-0-0_encapip=[838860802], leaf-0-1_encapip=[838860802, 855638017], leaf-0-4_encapip=[838860802, 855638017], core-0-0_vpn4=[vpn3], leaf-0-3_vpn3=[vbdif2], core-0-1_encapip=[838860802], core-0-0_vpn3=[vxlan], core-0-1_vpn4=[vpn3], core-0-1_vpn3=[vxlan], leaf-0-5_vpn4=[vxlan], leaf-0-1_vpn4=[vxlan], leaf-0-5_vpn3=[vxlan], leaf-0-1_vpn3=[vxlan], leaf-0-4_vpn3=[vxlan], leaf-0-5_encapip=[838860802, 855638017], leaf-0-4_vpn4=[vxlan], leaf-0-0_encapip=[838860802, 855638017], leaf-0-2_vpn3=[vbdif2], leaf-0-2_vpn4=[vxlan]}
after:[7684, 7642]
7684
{leaf-0-0_vpn3=[vxlan], leaf-0-3_vpn4=[vxlan], leaf-0-0_vpn4=[vxlan], leaf-0-3_encapip=[855638017], leaf-0-2_encapip=[855638017], core-0-0_encapip=[838860802], leaf-0-1_encapip=[838860802, 855638017], leaf-0-4_encapip=[838860802, 855638017], core-0-0_vpn4=[vpn3], leaf-0-3_vpn3=[vbdif2], core-0-1_encapip=[838860802], core-0-0_vpn3=[vxlan], core-0-1_vpn4=[vpn3], core-0-1_vpn3=[vxlan], leaf-0-5_vpn4=[vxlan], leaf-0-1_vpn4=[vxlan], leaf-0-5_vpn3=[vxlan], leaf-0-1_vpn3=[vxlan], leaf-0-4_vpn3=[vxlan], leaf-0-5_encapip=[838860802, 855638017], leaf-0-4_vpn4=[vxlan], leaf-0-0_encapip=[838860802, 855638017], leaf-0-2_vpn3=[vbdif2], leaf-0-2_vpn4=[vxlan]}
7642
{leaf-0-0_vpn3=[vxlan], leaf-0-3_vpn4=[vxlan], leaf-0-0_vpn4=[vxlan], leaf-0-3_encapip=[855638017], leaf-0-2_encapip=[855638017], core-0-0_encapip=[838860802], leaf-0-1_encapip=[838860802], leaf-0-4_encapip=[838860802], core-0-0_vpn4=[vpn3], leaf-0-3_vpn3=[vbdif2], core-0-1_encapip=[838860802], core-0-0_vpn3=[vxlan], core-0-1_vpn4=[vpn3], core-0-1_vpn3=[vxlan], leaf-0-5_vpn4=[vxlan], leaf-0-1_vpn4=[vxlan], leaf-0-5_vpn3=[vxlan], leaf-0-1_vpn3=[vxlan], leaf-0-4_vpn3=[vxlan], leaf-0-5_encapip=[838860802], leaf-0-4_vpn4=[vxlan], leaf-0-0_encapip=[838860802], leaf-0-2_vpn3=[vbdif2], leaf-0-2_vpn4=[vxlan]}


原本行为完全相同的两部分原子，在封装行为上略有不同，主要体现在一个规则在有的设备上可以从两个不同的端口出去，有的只能从一个端口出去
分别在
leaf-0-1_encapip
leaf-0-4_encapip
leaf-0-5_encapip
leaf-0-0_encapip


        int testbdd1=Element.bdd.encodeDstIPPrefix(167774209,24);
        int testbdd2=Element.bdd.encodeDstIPPrefix(167774209,32);
        int testbdd3=Element.bdd.diff(testbdd1,testbdd2);
        System.out.println(testbdd1);
        System.out.println(testbdd2);
        System.out.println(testbdd3);

410
7642
7684


+ fwd leaf-0-3_vpn3 167774209 32 vbdif2 32
+ fwd leaf-0-5_vpn4 167774209 24 vxlan 24
+ fwd leaf-0-4_vpn3 167774209 32 vxlan 32
+ fwd core-0-0_vpn4 167774209 24 vpn3 24
+ fwd leaf-0-5_vpn3 167774209 32 vxlan 32
+ fwd leaf-0-2_vpn3 167774209 32 vbdif2 32
+ fwd leaf-0-3_vpn4 167774209 24 vxlan 24
+ fwd leaf-0-0_vpn3 167774209 32 vxlan 32
+ fwd leaf-0-1_vpn3 167774209 32 vxlan 32
+ fwd core-0-1_vpn3 167774209 32 vxlan 32
+ fwd core-0-0_vpn3 167774209 32 vxlan 32
+ fwd leaf-0-4_vpn4 167774209 24 vxlan 24
+ fwd leaf-0-1_vpn4 167774209 24 vxlan 24
+ fwd leaf-0-2_vpn4 167774209 24 vxlan 24
+ fwd core-0-1_vpn4 167774209 24 vpn3 24
+ fwd leaf-0-0_vpn4 167774209 24 vxlan 24


+ fwd leaf-0-2_vpn3 167774208 24 vbdif2 24
+ fwd core-0-1_vpn3 167774208 24 vxlan 24
+ fwd leaf-0-5_vpn3 167774208 24 vxlan 24
+ fwd leaf-0-0_vpn3 167774208 24 vxlan 24
+ fwd leaf-0-4_vpn3 167774208 24 vxlan 24
+ fwd core-0-0_vpn3 167774208 24 vxlan 24
+ fwd leaf-0-3_vpn3 167774208 24 vbdif2 24
+ fwd leaf-0-1_vpn3 167774208 24 vxlan 24





*** SWB CHECK AP end cnt: 0

76

Process finished with exit code 0



# 验证如何近似估计的问题

vpn srcepg vni ip (underlay) decapip vnifw dstepg decapepg vpn

在只有ip的情况下，可达性496
如果添加了srcepg，放弃了dstepg和acl

添加srcepg和decapepg
关键还是在于这个acl上面